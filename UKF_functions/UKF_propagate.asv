function [mxkm, Pxxkm] = UKF_propagate(dt, mxkm1, Pxxkm1, Pww, accel, gyro, gamma)

g = [0; 0; 9.81]; % Gravity in NED frame

n = numel(mxkm1); lambda = gamma - n;
X_sigma = X_sigma_points(mxkm1, Pxxkm1, gamma);

% Weights
wm = [lambda/(n+lambda), repmat(0.5/(n+lambda),1,2*n)];
wc = wm; 
wc(1) = wc(1) + (1-alpha^2+beta); 

% Sigma points to IMU kinematics
X_sigma_prop = []; 

% Unscented transform
for jj = 1:length(X_sigma)
X_ = IMU_kinematics(dt, mxkm1, accel, gyro); 
X_sigma_prop = [X_sigma_prop, X_]; 

end

    % Extract state
  
   
    % -------- Jacobian F --------
    F = eye(16);
    
    % Position wrt velocity
    F(1:3, 4:6) = eye(3) * dt;
    
    % Velocity wrt quaternion
    F(4:6, 8:10) = -R * skew(a_corr) * dt;
    
    % Velocity wrt accel bias
    F(4:6, 11:13) = -R * dt; 
    
    % Quaternion wrt quaternion
    F(7:10, 7:10) = eye(4) + 0.5 * quatOmega(w_corr) * dt;
    
    % Quaternion wrt gyro bias
    Gq = quatVectorProductMatrix(qxkm1); 
    F(7:10, 14:16) = -0.5 * Gq * dt;

    % Covariance propagation
    Pxxkm = F * Pxxkm1 * F' + Pww;

end